// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package schema

import (
	"context"
)

// iteratorForCreateHoles implements pgx.CopyFromSource.
type iteratorForCreateHoles struct {
	rows                 []*CreateHolesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateHoles) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateHoles) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Nr,
		r.rows[0].Par,
		r.rows[0].Index,
		r.rows[0].CourseID,
	}, nil
}

func (r iteratorForCreateHoles) Err() error {
	return nil
}

func (q *Queries) CreateHoles(ctx context.Context, arg []*CreateHolesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"holes"}, []string{"nr", "par", "index", "course_id"}, &iteratorForCreateHoles{rows: arg})
}

// iteratorForCreateTees implements pgx.CopyFromSource.
type iteratorForCreateTees struct {
	rows                 []*CreateTeesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTees) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTees) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Name,
		r.rows[0].Slope,
		r.rows[0].Cr,
		r.rows[0].CourseID,
	}, nil
}

func (r iteratorForCreateTees) Err() error {
	return nil
}

func (q *Queries) CreateTees(ctx context.Context, arg []*CreateTeesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"tees"}, []string{"name", "slope", "cr", "course_id"}, &iteratorForCreateTees{rows: arg})
}
