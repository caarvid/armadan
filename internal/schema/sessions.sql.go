// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sessions.sql

package schema

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (token, user_id, expires_at, is_active) VALUES ($1, $2, $3, $4) RETURNING id, user_id, expires_at, is_active, token
`

type CreateSessionParams struct {
	Token     string             `json:"token"`
	UserID    uuid.UUID          `json:"userId"`
	ExpiresAt pgtype.Timestamptz `json:"expiresAt"`
	IsActive  bool               `json:"isActive"`
}

func (q *Queries) CreateSession(ctx context.Context, arg *CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.Token,
		arg.UserID,
		arg.ExpiresAt,
		arg.IsActive,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.IsActive,
		&i.Token,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions WHERE token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteSession, token)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, expires_at, is_active, token FROM user_sessions WHERE token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, token)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.IsActive,
		&i.Token,
	)
	return i, err
}
