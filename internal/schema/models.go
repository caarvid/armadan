// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package schema

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type UsersRoleEnum string

const (
	UsersRoleEnumUser      UsersRoleEnum = "user"
	UsersRoleEnumAdmin     UsersRoleEnum = "admin"
	UsersRoleEnumModerator UsersRoleEnum = "moderator"
)

func (e *UsersRoleEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRoleEnum(s)
	case string:
		*e = UsersRoleEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRoleEnum: %T", src)
	}
	return nil
}

type NullUsersRoleEnum struct {
	UsersRoleEnum UsersRoleEnum `json:"usersRoleEnum"`
	Valid         bool          `json:"valid"` // Valid is true if UsersRoleEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRoleEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRoleEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRoleEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRoleEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRoleEnum), nil
}

type Course struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	Par  int32     `json:"par"`
}

type Hole struct {
	ID       uuid.UUID `json:"id"`
	Nr       int32     `json:"nr"`
	Par      int32     `json:"par"`
	Index    int32     `json:"index"`
	CourseID uuid.UUID `json:"courseId"`
}

type PasswordResetToken struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"userId"`
	Hash      string             `json:"hash"`
	ExpiresAt pgtype.Timestamptz `json:"expiresAt"`
	IsValid   bool               `json:"isValid"`
}

type Player struct {
	ID        uuid.UUID `json:"id"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Points    int32     `json:"points"`
	UserID    uuid.UUID `json:"userId"`
}

type Post struct {
	ID        uuid.UUID          `json:"id"`
	Title     string             `json:"title"`
	Body      string             `json:"body"`
	Author    string             `json:"author"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
}

type Tee struct {
	ID       uuid.UUID      `json:"id"`
	Name     string         `json:"name"`
	Slope    int32          `json:"slope"`
	Cr       pgtype.Numeric `json:"cr"`
	CourseID uuid.UUID      `json:"courseId"`
}

type User struct {
	ID       uuid.UUID     `json:"id"`
	Email    string        `json:"email"`
	Password string        `json:"password"`
	Role     UsersRoleEnum `json:"role"`
}

type UserSession struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"userId"`
	ExpiresAt pgtype.Timestamptz `json:"expiresAt"`
	IsActive  bool               `json:"isActive"`
	Token     string             `json:"token"`
}

type Week struct {
	ID       uuid.UUID `json:"id"`
	Nr       int32     `json:"nr"`
	CourseID uuid.UUID `json:"courseId"`
	TeeID    uuid.UUID `json:"teeId"`
}
