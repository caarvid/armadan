// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: batch.go

package schema

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/shopspring/decimal"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const updateHoles = `-- name: UpdateHoles :batchexec
UPDATE holes SET nr = $1, par = $2, index = $3 WHERE id = $4
`

type UpdateHolesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateHolesParams struct {
	Nr    int32     `json:"nr"`
	Par   int32     `json:"par"`
	Index int32     `json:"index"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateHoles(ctx context.Context, arg []*UpdateHolesParams) *UpdateHolesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Nr,
			a.Par,
			a.Index,
			a.ID,
		}
		batch.Queue(updateHoles, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdateHolesBatchResults{br, len(arg), false}
}

func (b *UpdateHolesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateHolesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const updateTees = `-- name: UpdateTees :batchexec
UPDATE tees SET name = $1, slope = $2, cr = $3 WHERE id = $4
`

type UpdateTeesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateTeesParams struct {
	Name  string          `json:"name"`
	Slope int32           `json:"slope"`
	Cr    decimal.Decimal `json:"cr"`
	ID    uuid.UUID       `json:"id"`
}

func (q *Queries) UpdateTees(ctx context.Context, arg []*UpdateTeesParams) *UpdateTeesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Name,
			a.Slope,
			a.Cr,
			a.ID,
		}
		batch.Queue(updateTees, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdateTeesBatchResults{br, len(arg), false}
}

func (b *UpdateTeesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateTeesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
