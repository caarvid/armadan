// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: password_reset_tokens.sql

package schema

import (
	"context"
)

const createResetPasswordToken = `-- name: CreateResetPasswordToken :one
INSERT INTO password_reset_tokens (token, user_id, expires_at) VALUES (?, ?, ?) RETURNING id, token, expires_at, user_id
`

type CreateResetPasswordTokenParams struct {
	Token     string `json:"token"`
	UserID    string `json:"userId"`
	ExpiresAt string `json:"expiresAt"`
}

func (q *Queries) CreateResetPasswordToken(ctx context.Context, arg *CreateResetPasswordTokenParams) (PasswordResetToken, error) {
	row := q.queryRow(ctx, q.createResetPasswordTokenStmt, createResetPasswordToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const deleteResetPasswordToken = `-- name: DeleteResetPasswordToken :exec
DELETE FROM password_reset_tokens WHERE token = ?
`

func (q *Queries) DeleteResetPasswordToken(ctx context.Context, token string) error {
	_, err := q.exec(ctx, q.deleteResetPasswordTokenStmt, deleteResetPasswordToken, token)
	return err
}

const getResetPasswordToken = `-- name: GetResetPasswordToken :one
SELECT id, token, expires_at, user_id FROM password_reset_tokens WHERE token = ?
`

func (q *Queries) GetResetPasswordToken(ctx context.Context, token string) (PasswordResetToken, error) {
	row := q.queryRow(ctx, q.getResetPasswordTokenStmt, getResetPasswordToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}
