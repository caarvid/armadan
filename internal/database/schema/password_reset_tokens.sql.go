// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: password_reset_tokens.sql

package schema

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO password_reset_tokens (hash, user_id, expires_at) VALUES ($1, $2, $3) RETURNING id, user_id, hash, expires_at, is_valid
`

type CreateTokenParams struct {
	Hash      string             `json:"hash"`
	UserID    uuid.UUID          `json:"userId"`
	ExpiresAt pgtype.Timestamptz `json:"expiresAt"`
}

func (q *Queries) CreateToken(ctx context.Context, arg *CreateTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, createToken, arg.Hash, arg.UserID, arg.ExpiresAt)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Hash,
		&i.ExpiresAt,
		&i.IsValid,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM password_reset_tokens WHERE user_id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteToken, userID)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, user_id, hash, expires_at, is_valid FROM password_reset_tokens WHERE hash = $1
`

func (q *Queries) GetToken(ctx context.Context, hash string) (PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, getToken, hash)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Hash,
		&i.ExpiresAt,
		&i.IsValid,
	)
	return i, err
}
