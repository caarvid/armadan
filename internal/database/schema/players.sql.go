// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: players.sql

package schema

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (id, first_name, last_name, user_id) VALUES (?, ?, ?, ?) RETURNING id, first_name, last_name, user_id
`

type CreatePlayerParams struct {
	ID        string `json:"id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	UserID    string `json:"userId"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg *CreatePlayerParams) (Player, error) {
	row := q.queryRow(ctx, q.createPlayerStmt, createPlayer,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.UserID,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserID,
	)
	return i, err
}

const getLeaderboard = `-- name: GetLeaderboard :many
SELECT 
  p.id, p.first_name, p.last_name, p.user_id, p.email, p.points, p.hcp,
  count(r.id) as nr_of_rounds
FROM players_extended p
LEFT JOIN rounds r ON r.player_id = p.id
GROUP BY p.id
ORDER BY p.points DESC, nr_of_rounds DESC
`

type GetLeaderboardRow struct {
	ID         string  `json:"id"`
	FirstName  string  `json:"firstName"`
	LastName   string  `json:"lastName"`
	UserID     string  `json:"userId"`
	Email      string  `json:"email"`
	Points     int64   `json:"points"`
	Hcp        float64 `json:"hcp"`
	NrOfRounds int64   `json:"nrOfRounds"`
}

func (q *Queries) GetLeaderboard(ctx context.Context) ([]GetLeaderboardRow, error) {
	rows, err := q.query(ctx, q.getLeaderboardStmt, getLeaderboard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderboardRow
	for rows.Next() {
		var i GetLeaderboardRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.UserID,
			&i.Email,
			&i.Points,
			&i.Hcp,
			&i.NrOfRounds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, first_name, last_name, user_id, email, points, hcp FROM players_extended p WHERE p.id = ?
`

func (q *Queries) GetPlayer(ctx context.Context, id string) (PlayersExtended, error) {
	row := q.queryRow(ctx, q.getPlayerStmt, getPlayer, id)
	var i PlayersExtended
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserID,
		&i.Email,
		&i.Points,
		&i.Hcp,
	)
	return i, err
}

const getPlayerByUserId = `-- name: GetPlayerByUserId :one
SELECT 
    p.id, p.first_name, p.last_name, p.user_id, p.email, p.points, p.hcp,
    count(r.id) as nr_of_rounds
FROM players_extended p 
LEFT JOIN rounds r ON r.player_id = p.id
WHERE p.user_id = ?
`

type GetPlayerByUserIdRow struct {
	ID         string  `json:"id"`
	FirstName  string  `json:"firstName"`
	LastName   string  `json:"lastName"`
	UserID     string  `json:"userId"`
	Email      string  `json:"email"`
	Points     int64   `json:"points"`
	Hcp        float64 `json:"hcp"`
	NrOfRounds int64   `json:"nrOfRounds"`
}

func (q *Queries) GetPlayerByUserId(ctx context.Context, userID string) (GetPlayerByUserIdRow, error) {
	row := q.queryRow(ctx, q.getPlayerByUserIdStmt, getPlayerByUserId, userID)
	var i GetPlayerByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserID,
		&i.Email,
		&i.Points,
		&i.Hcp,
		&i.NrOfRounds,
	)
	return i, err
}

const getPlayers = `-- name: GetPlayers :many
SELECT id, first_name, last_name, user_id, email, points, hcp FROM players_extended p ORDER BY p.last_name ASC, p.first_name ASC
`

func (q *Queries) GetPlayers(ctx context.Context) ([]PlayersExtended, error) {
	rows, err := q.query(ctx, q.getPlayersStmt, getPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlayersExtended
	for rows.Next() {
		var i PlayersExtended
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.UserID,
			&i.Email,
			&i.Points,
			&i.Hcp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE players SET first_name = ?, last_name = ?  WHERE id = ? RETURNING id, first_name, last_name, user_id
`

type UpdatePlayerParams struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	ID        string `json:"id"`
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg *UpdatePlayerParams) (Player, error) {
	row := q.queryRow(ctx, q.updatePlayerStmt, updatePlayer, arg.FirstName, arg.LastName, arg.ID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserID,
	)
	return i, err
}
