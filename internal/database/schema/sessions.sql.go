// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package schema

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (token, user_id, expires_at) VALUES (?, ?, ?) RETURNING id, token, expires_at, user_id
`

type CreateSessionParams struct {
	Token     string `json:"token"`
	UserID    string `json:"userId"`
	ExpiresAt string `json:"expiresAt"`
}

func (q *Queries) CreateSession(ctx context.Context, arg *CreateSessionParams) (Session, error) {
	row := q.queryRow(ctx, q.createSessionStmt, createSession, arg.Token, arg.UserID, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, token)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT 
  s.id, s.token, s.expires_at, s.user_id,
  u.email,
  u.user_role
FROM sessions s 
JOIN users u ON u.id = s.user_id 
WHERE token = ?
`

type GetSessionByTokenRow struct {
	ID        int64  `json:"id"`
	Token     string `json:"token"`
	ExpiresAt string `json:"expiresAt"`
	UserID    string `json:"userId"`
	Email     string `json:"email"`
	UserRole  string `json:"userRole"`
}

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (GetSessionByTokenRow, error) {
	row := q.queryRow(ctx, q.getSessionByTokenStmt, getSessionByToken, token)
	var i GetSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpiresAt,
		&i.UserID,
		&i.Email,
		&i.UserRole,
	)
	return i, err
}
