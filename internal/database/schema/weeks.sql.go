// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: weeks.sql

package schema

import (
	"context"
	"database/sql"
)

const createWeek = `-- name: CreateWeek :one
INSERT INTO weeks (id, nr, course_id, tee_id, is_finals, finals_date) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, nr, is_finals, finals_date, course_id, tee_id
`

type CreateWeekParams struct {
	ID         string         `json:"id"`
	Nr         int64          `json:"nr"`
	CourseID   string         `json:"courseId"`
	TeeID      string         `json:"teeId"`
	IsFinals   int64          `json:"isFinals"`
	FinalsDate sql.NullString `json:"finalsDate"`
}

func (q *Queries) CreateWeek(ctx context.Context, arg *CreateWeekParams) (Week, error) {
	row := q.queryRow(ctx, q.createWeekStmt, createWeek,
		arg.ID,
		arg.Nr,
		arg.CourseID,
		arg.TeeID,
		arg.IsFinals,
		arg.FinalsDate,
	)
	var i Week
	err := row.Scan(
		&i.ID,
		&i.Nr,
		&i.IsFinals,
		&i.FinalsDate,
		&i.CourseID,
		&i.TeeID,
	)
	return i, err
}

const deleteWeek = `-- name: DeleteWeek :exec
DELETE FROM weeks WHERE id = ?
`

func (q *Queries) DeleteWeek(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteWeekStmt, deleteWeek, id)
	return err
}

const getWeek = `-- name: GetWeek :one
SELECT id, nr, finals_date, is_finals, course_id, course_name, tee_id, tee_name FROM week_details WHERE id = ?
`

func (q *Queries) GetWeek(ctx context.Context, id string) (WeekDetail, error) {
	row := q.queryRow(ctx, q.getWeekStmt, getWeek, id)
	var i WeekDetail
	err := row.Scan(
		&i.ID,
		&i.Nr,
		&i.FinalsDate,
		&i.IsFinals,
		&i.CourseID,
		&i.CourseName,
		&i.TeeID,
		&i.TeeName,
	)
	return i, err
}

const getWeeks = `-- name: GetWeeks :many
SELECT id, nr, finals_date, is_finals, course_id, course_name, tee_id, tee_name FROM week_details ORDER BY nr ASC
`

func (q *Queries) GetWeeks(ctx context.Context) ([]WeekDetail, error) {
	rows, err := q.query(ctx, q.getWeeksStmt, getWeeks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WeekDetail
	for rows.Next() {
		var i WeekDetail
		if err := rows.Scan(
			&i.ID,
			&i.Nr,
			&i.FinalsDate,
			&i.IsFinals,
			&i.CourseID,
			&i.CourseName,
			&i.TeeID,
			&i.TeeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWeek = `-- name: UpdateWeek :one
UPDATE weeks SET nr = ?, course_id = ?, tee_id = ? WHERE id = ? RETURNING id, nr, is_finals, finals_date, course_id, tee_id
`

type UpdateWeekParams struct {
	Nr       int64  `json:"nr"`
	CourseID string `json:"courseId"`
	TeeID    string `json:"teeId"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateWeek(ctx context.Context, arg *UpdateWeekParams) (Week, error) {
	row := q.queryRow(ctx, q.updateWeekStmt, updateWeek,
		arg.Nr,
		arg.CourseID,
		arg.TeeID,
		arg.ID,
	)
	var i Week
	err := row.Scan(
		&i.ID,
		&i.Nr,
		&i.IsFinals,
		&i.FinalsDate,
		&i.CourseID,
		&i.TeeID,
	)
	return i, err
}
