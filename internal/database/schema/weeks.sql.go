// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: weeks.sql

package schema

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWeek = `-- name: CreateWeek :one
INSERT INTO weeks (nr, course_id, tee_id, is_finals, finals_date) VALUES ($1, $2, $3, $4, $5) RETURNING id, nr, course_id, tee_id, finals_date, is_finals
`

type CreateWeekParams struct {
	Nr         int32              `json:"nr"`
	CourseID   uuid.UUID          `json:"courseId"`
	TeeID      uuid.UUID          `json:"teeId"`
	IsFinals   pgtype.Bool        `json:"isFinals"`
	FinalsDate pgtype.Timestamptz `json:"finalsDate"`
}

func (q *Queries) CreateWeek(ctx context.Context, arg *CreateWeekParams) (Week, error) {
	row := q.db.QueryRow(ctx, createWeek,
		arg.Nr,
		arg.CourseID,
		arg.TeeID,
		arg.IsFinals,
		arg.FinalsDate,
	)
	var i Week
	err := row.Scan(
		&i.ID,
		&i.Nr,
		&i.CourseID,
		&i.TeeID,
		&i.FinalsDate,
		&i.IsFinals,
	)
	return i, err
}

const deleteWeek = `-- name: DeleteWeek :exec
DELETE FROM weeks WHERE id = $1
`

func (q *Queries) DeleteWeek(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWeek, id)
	return err
}

const getWeek = `-- name: GetWeek :one
SELECT id, nr, finals_date, is_finals, course_id, course_name, tee_id, tee_name FROM week_details WHERE id = $1::UUID
`

func (q *Queries) GetWeek(ctx context.Context, dollar_1 uuid.UUID) (WeekDetail, error) {
	row := q.db.QueryRow(ctx, getWeek, dollar_1)
	var i WeekDetail
	err := row.Scan(
		&i.ID,
		&i.Nr,
		&i.FinalsDate,
		&i.IsFinals,
		&i.CourseID,
		&i.CourseName,
		&i.TeeID,
		&i.TeeName,
	)
	return i, err
}

const getWeeks = `-- name: GetWeeks :many
SELECT id, nr, finals_date, is_finals, course_id, course_name, tee_id, tee_name FROM week_details ORDER BY nr ASC
`

func (q *Queries) GetWeeks(ctx context.Context) ([]WeekDetail, error) {
	rows, err := q.db.Query(ctx, getWeeks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WeekDetail
	for rows.Next() {
		var i WeekDetail
		if err := rows.Scan(
			&i.ID,
			&i.Nr,
			&i.FinalsDate,
			&i.IsFinals,
			&i.CourseID,
			&i.CourseName,
			&i.TeeID,
			&i.TeeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWeek = `-- name: UpdateWeek :one
UPDATE weeks SET nr = $1, course_id = $2, tee_id = $3 WHERE id = $4 RETURNING id, nr, course_id, tee_id, finals_date, is_finals
`

type UpdateWeekParams struct {
	Nr       int32     `json:"nr"`
	CourseID uuid.UUID `json:"courseId"`
	TeeID    uuid.UUID `json:"teeId"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdateWeek(ctx context.Context, arg *UpdateWeekParams) (Week, error) {
	row := q.db.QueryRow(ctx, updateWeek,
		arg.Nr,
		arg.CourseID,
		arg.TeeID,
		arg.ID,
	)
	var i Week
	err := row.Scan(
		&i.ID,
		&i.Nr,
		&i.CourseID,
		&i.TeeID,
		&i.FinalsDate,
		&i.IsFinals,
	)
	return i, err
}
