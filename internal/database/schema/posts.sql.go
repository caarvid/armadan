// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package schema

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, title, body, author) VALUES (?, ?, ?, ?) RETURNING id, title, body, author, created_at
`

type CreatePostParams struct {
	ID     string `json:"id"`
	Title  string `json:"title"`
	Body   string `json:"body"`
	Author string `json:"author"`
}

func (q *Queries) CreatePost(ctx context.Context, arg *CreatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.createPostStmt, createPost,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.Author,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Author,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deletePostStmt, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, body, author, created_at FROM posts WHERE id = ? LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id string) (Post, error) {
	row := q.queryRow(ctx, q.getPostStmt, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Author,
		&i.CreatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, title, body, author, created_at FROM posts ORDER BY created_at DESC
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsStmt, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts SET title = ?, body = ?, author = ? WHERE id = ? RETURNING id, title, body, author, created_at
`

type UpdatePostParams struct {
	Title  string `json:"title"`
	Body   string `json:"body"`
	Author string `json:"author"`
	ID     string `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg *UpdatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.updatePostStmt, updatePost,
		arg.Title,
		arg.Body,
		arg.Author,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Author,
		&i.CreatedAt,
	)
	return i, err
}
