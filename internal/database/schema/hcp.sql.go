// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hcp.sql

package schema

import (
	"context"
	"database/sql"
)

const createHcpChange = `-- name: CreateHcpChange :one
INSERT INTO hcp_changes (old_hcp, new_hcp, round_id, player_id, valid_from) VALUES (?, ?, ?, ?, ?) RETURNING id, new_hcp, old_hcp, valid_from, round_id, player_id
`

type CreateHcpChangeParams struct {
	OldHcp    float64        `json:"oldHcp"`
	NewHcp    float64        `json:"newHcp"`
	RoundID   sql.NullString `json:"roundId"`
	PlayerID  sql.NullString `json:"playerId"`
	ValidFrom string         `json:"validFrom"`
}

func (q *Queries) CreateHcpChange(ctx context.Context, arg *CreateHcpChangeParams) (HcpChange, error) {
	row := q.queryRow(ctx, q.createHcpChangeStmt, createHcpChange,
		arg.OldHcp,
		arg.NewHcp,
		arg.RoundID,
		arg.PlayerID,
		arg.ValidFrom,
	)
	var i HcpChange
	err := row.Scan(
		&i.ID,
		&i.NewHcp,
		&i.OldHcp,
		&i.ValidFrom,
		&i.RoundID,
		&i.PlayerID,
	)
	return i, err
}

const getPlayerHcp = `-- name: GetPlayerHcp :one
SELECT new_hcp FROM hcp_changes WHERE player_id = ? ORDER BY datetime(valid_from) DESC LIMIT 1
`

func (q *Queries) GetPlayerHcp(ctx context.Context, playerID sql.NullString) (float64, error) {
	row := q.queryRow(ctx, q.getPlayerHcpStmt, getPlayerHcp, playerID)
	var new_hcp float64
	err := row.Scan(&new_hcp)
	return new_hcp, err
}
